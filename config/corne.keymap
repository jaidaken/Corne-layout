#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

// dt-formatter: indent = "  "
// dt-formatter: multilineIntegerCellsIndent = "reindent"
// dt-formatter: multilineListCommaStyle = "leading"

&sk {
  /delete-property/ ignore-modifiers;
};

/ {
  combos {
    compatible = "zmk,combos";

    caps_word {
      key-positions = <17 18>;
      bindings = <&caps_word>;
    };

    delete {
      key-positions = <11 23>;
      bindings = <&kp DEL>;
    };

    wasd {
      bindings = <&to 1>;
      key-positions = <40 41>;
    };

    colemak {
      bindings = <&to 0>;
      key-positions = <36 37>;
    };
  };

  macros {
    greeting: greeting {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      label = "greeting";
      bindings = <&kp H &kp E &kp L &kp L &kp O>;
    };

    rgblayer: rgb_layer {
      compatible = "zmk,behavior-macro-two-param";
      #binding-cells = <2>;
      label = "MOMENTARY_LAYER_WITH_RGB_COLOR";
      bindings
        = <&macro_param_2to2 &rgb_ug RGB_COLOR_HSB_CMD MACRO_PLACEHOLDER &macro_param_1to1>
        , <&macro_press>
        , <&mo MACRO_PLACEHOLDER>
        , <&macro_pause_for_release>
        , <&macro_release>
        , <&macro_param_1to1 &mo MACRO_PLACEHOLDER>
        , <&macro_tap>
        , <&rgb_ug RGB_TOG>
        ;
    };

    shift: with_lshift {
      compatible = "zmk,behavior-macro-one-param";
      #binding-cells = <1>;
      label = "KEY_PRESS_WITH_LEFT_SHIFT_MODIFIER";
      bindings
        = <&macro_press>
        , <&kp LSHFT>
        , <&macro_tap>
        , <&macro_param_1to1 &kp MACRO_PLACEHOLDER>
        , <&macro_release>
        , <&kp LSHFT>
        ;
    };

    as: autoshift {
      compatible = "zmk,behavior-macro-one-param";
      #binding-cells = <1>;
      label = "AUTOSHIFT_KEYPRESS";
      bindings
        = <&macro_press>
        , <&macro_param_1to1 &macro_param_1to2 &as_ht MACRO_PLACEHOLDER MACRO_PLACEHOLDER>
        , <&macro_pause_for_release>
        , <&macro_release>
        , <&macro_param_1to1 &macro_param_1to2 &as_ht MACRO_PLACEHOLDER MACRO_PLACEHOLDER>
        ;
    };
  };

  behaviors {
    as_ht: autoshift_hold_tap {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      label = "AUTOSHIFT_HOLD_TAP";
      bindings = <&shift>, <&kp>;

      tapping-term-ms = <190>;
    };

    hml: homewrow_mods_left {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      label = "HOMEROW_MODS_LEFT_HAND";
      bindings = <&kp>, <&kp>;

      tapping-term-ms = <200>;
      hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41>;
    };

    hmr: homewrow_mods_right {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      label = "HOMEROW_MODS_RIGHT_HAND";
      bindings = <&kp>, <&kp>;

      tapping-term-ms = <200>;
      hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
    };

    capdance: capdance {
      compatible = "zmk,behavior-tap-dance";
      label = "CAPDANCE";
      #binding-cells = <0>;
      bindings = <&caps_word>, <&kp CAPS>;
    };

    volknob: volume_encoder {
      compatible = "zmk,behavior-sensor-rotate";
      label = "ENCODER_VOLUME_KNOB";
      #sensor-binding-cells = <0>;
      bindings = <&kp C_VOL_UP>, <&kp C_VOL_DN>;
    };

    rgbknob: rgb_encoder {
      compatible = "zmk,behavior-sensor-rotate-var";
      label = "ENCODER_RGB";
      #sensor-binding-cells = <2>;
      bindings = <&rgb_ug>, <&rgb_ug>;
    };
  };

  conditional_layers {
    compatible = "zmk,conditional-layers";

    tri_layer {
      if-layers = <1 1>;
      then-layer = <1>;
    };
  };

  keymap {
    compatible = "zmk,keymap";

    Colemak-DH {
      bindings = <
        &mt LEFT_ALT ESCAPE  &kp Q  &kp W  &kp F  &kp P  &kp G        &kp J     &kp L  &kp U     &kp Y  &kp P    &kp BSPC
        &mt LCTRL TAB        &kp A  &kp R  &kp S  &kp T  &kp D        &kp H     &kp N  &kp E     &kp I  &kp O    &kp LCTRL
        &kp LSHFT            &kp Z  &kp X  &kp C  &kp V  &kp FSLH     &kp BSLH  &kp M  &kp K     &kp B  &kp DOT  &kp LSHFT
                                           &to 4  &to 3  &kp SPACE    &kp RET   &to 2  &kp LGUI
      >;
    };

    layer_1 {
      bindings = <
        &trans  &kp Q  &kp W  &kp E   &kp R   &kp T     &kp Y   &kp U   &kp I   &kp O  &kp P      &trans
        &trans  &kp A  &kp S  &kp D   &kp F   &kp G     &kp H   &kp J   &kp K   &kp L  &kp COMMA  &trans
        &trans  &kp Z  &kp X  &kp C   &kp V   &trans    &trans  &kp B   &kp N   &kp M  &trans     &trans
                              &trans  &trans  &trans    &trans  &trans  &trans
      >;
    };

    raise {
      bindings = <
        &trans  &none  &kp N7  &kp N8  &kp N9  &none     &kp F1   &kp F2   &kp F3   &kp F4   &kp F5   &kp F6
        &trans  &none  &kp N4  &kp N5  &kp N6  &none     &kp F7   &kp F8   &kp F9   &kp F10  &kp F11  &kp F12
        &trans  &none  &kp N1  &kp N2  &kp N3  &none     &kp F13  &kp F14  &kp F15  &kp F16  &kp F17  &kp F18
                               &none   &kp N0  &trans    &trans   &none    &none
      >;
    };

    coding {
      bindings = <
        &kp TILDE      &kp PIPE          &kp AMPS    &kp STAR     &kp HASH         &kp SEMI        &kp TILDE  &kp PIPE        &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp DOUBLE_QUOTES  &trans
        &kp PLUS       &kp MINUS         &kp DOLLAR  &kp PERCENT  &kp CARET        &kp COLON       &kp PLUS   &kp MINUS       &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp GRAVE          &kp SQT
        &kp LESS_THAN  &kp GREATER_THAN  &kp POUND   &kp AT       &kp EXCLAMATION  &kp QUESTION    &kp EQUAL  &kp UNDERSCORE  &kp LBKT              &kp RBKT               &kp COMMA          &kp DOT
                                                     &none        &none            &trans          &trans     &none           &none
      >;
    };

    layer_4 {
      bindings = <
        &trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
        &trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
        &trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                                &trans  &trans  &trans    &trans  &trans  &trans
      >;
    };

    layer_5 {
      bindings = <
        &trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
        &trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
        &trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                                &trans  &trans  &trans    &trans  &trans  &trans
      >;
    };
  };
};
